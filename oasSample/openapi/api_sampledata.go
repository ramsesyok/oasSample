/*
 * OasSample
 *
 * OpenAPI Sample with Go
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A SampledataApiController binds http requests to an api service and writes the service results to the http response
type SampledataApiController struct {
	service SampledataApiServicer
}

// NewSampledataApiController creates a default api controller
func NewSampledataApiController(s SampledataApiServicer) Router {
	return &SampledataApiController{ service: s }
}

// Routes returns all of the api route for the SampledataApiController
func (c *SampledataApiController) Routes() Routes {
	return Routes{ 
		{
			"GetSampleDataDataId",
			strings.ToUpper("Get"),
			"/sampleData/{data_id}",
			c.GetSampleDataDataId,
		},
		{
			"PutSampleDataDataId",
			strings.ToUpper("Put"),
			"/sampleData/{data_id}",
			c.PutSampleDataDataId,
		},
	}
}

// GetSampleDataDataId - Get SampleData
func (c *SampledataApiController) GetSampleDataDataId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dataId := params["dataId"]
	result, err := c.service.GetSampleDataDataId(dataId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// PutSampleDataDataId - Update SampleData
func (c *SampledataApiController) PutSampleDataDataId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dataId := params["dataId"]
	sampleData := &SampleData{}
	if err := json.NewDecoder(r.Body).Decode(&sampleData); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.PutSampleDataDataId(dataId, *sampleData)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
